@import "../mixins/position";
$breakpoints: (
        lg:(
                3: 262,
                4: 360,
                6: 555
        ),
        md:(
                3: 213,
                4: 293,
                6: 455
        ),
        sm:(
                3: 158,
                4: 220,
                6: 345
        ),
        xs:(
                6: 260
        ),
        sxs:(
                6: 260,
                12: 290,
        ),
);

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map_get($map, $key);
  }
  @return $map;
}

@function media-height($height,$large, $point-width){
  @if($point-width !=false){
    @return floor($height/($large/$point-width));
  }@else {
    @return false;
  }
}
@mixin item-img($height, $lgColumn, $sizes) {
  .item-img {
    overflow: hidden;
    position: relative;
    display: block;
    height: $height;
    @content;
    $lgColumnWidth: map-deep-get($breakpoints, 'lg', $lgColumn);
    @each $size, $columnCount in $sizes {
      $columnWidth: map-deep-get($breakpoints, $size, $columnCount);

      @include breakpoint(#{$size}){
        height: media-height($height, $lgColumnWidth, $columnWidth);
      }
    }
    &>img {
      max-width: 100%;
      max-height: 100%;
      @include centering-transform;
    }
  }
}
@mixin img-wrap($height, $lgColumn, $sizes) {
  overflow: hidden;
  position: relative;
  display: block;
  height: $height;
  @content;
  $lgColumnWidth: map-deep-get($breakpoints, 'lg', $lgColumn);
  @each $size, $columnCount in $sizes {
    $columnWidth: map-deep-get($breakpoints, $size, $columnCount);
    @include breakpoint(#{$size}){
      @if($size == xs or $size == sxs){
        width: #{$columnWidth}px;
      }
      height: media-height($height, $lgColumnWidth, $columnWidth);
    }
  }
  &>img {
    max-width: 100%;
    max-height: 100%;
    @include centering-transform;
  }
}
@mixin img {
  max-width: 100%;
  max-height: 100%;
  @include centering-transform;
}